import streamlit as st
import os
from PIL import Image
import base64
import io

st.title('MRI Condyle Segmentation Application')

option = st.selectbox(
     'Select option',
     ('Single MRI scan', 'Multiple MRI scans')
)

uploaded_files = st.file_uploader("Choose MRI scan files", type=["dcm", "png", "jpg"], accept_multiple_files=True)

if uploaded_files is not None:
    for uploaded_file in uploaded_files:
        file_type = uploaded_file.name.split(".")[-1]
        file_name = f'temp.{file_type}'
        with open(file_name, "wb") as f:
            f.write(uploaded_file.getbuffer())
        st.write(f'Uploaded MRI scan: {file_name}')
        image = Image.open(file_name).resize((224, 224))
        st.image(image, caption=file_name, use_column_width=True)

        st.write('Uploaded file size: ', os.path.getsize(file_name))
        if os.path.getsize(file_name) > 200 * 224 * 224:
            st.write('File size exceeds 200MB. Please upload a smaller file.')

        # Simulate segmentation process by saving a segmented image
        try:
            segmented_image = Image.open('img_sources\segmented_image.png')
            st.write('Segmented MRI scan:')
            st.image(segmented_image, caption='Hasil Segmentasi', use_column_width=True)
        except FileNotFoundError:
            st.write('Segmented image not found. Please ensure that "segmented_image.png" is present in the same directory as the script.')

        # Save temporary files
        with open(file_name, "rb") as f:
            base64_uploaded_file = base64.b64encode(f.read()).decode()

        with open('segmented_image.png', "rb") as f:
            base64_segmented_image = base64.b64encode(f.read()).decode()

        st.download_button(
            label="Download segmented MRI scan",
            data=base64_segmented_image,
            file_name='segmented_mri_scan.png',
            mime='image/png'
        )

        st.download_button(
            label="Download original MRI scan",
            data=base64_uploaded_file,
            file_name=file_name,
            mime=f'image/{file_type}'
        )

        # Clean up temporary files
        os.remove(file_name)